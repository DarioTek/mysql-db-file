USE financedb;

SELECT TICKER, DATE(DATETIME) AS RECORD_DATE, COUNT(*) AS COUNT FROM OHLC_MINUTES ORDER BY TICKER;


GRANT FILE ON *.* TO 'finance_user'@'localhost';

GRANT FILE ON *.* TO 'remote_user'@'localhost';


FLUSH PRIVILEGES;

SELECT * FROM OHLC_MINUTES WHERE DATE(DATETIME) = '2024-07-02';

SELECT DISTINCT(TICKER) FROM OHLC_MINUTES WHERE DATE(DATETIME) = '2024-07-02';

SELECT * FROM WATCH_LIST WHERE SYMBOL <> 'SPX' ORDER BY SYMBOL;

SELECT YFINANCE_SYMBOL FROM WATCH_LIST ORDER BY SYMBOL;

INSERT INTO OHLC_MINUTES (Ticker, Datetime, Open, High, Low, Close, Adj_Close, Volume)
SELECT '$SPX', Datetime, Open, High, Low, Close, Adj_Close, Volume
FROM SPX_OHLC_MINUTES;

COMMIT;

select * from OPTION_CHAIN;

# SYNTAX
INSERT INTO new_table
SELECT * FROM old_table;



SET SQL_SAFE_UPDATES = 0; # DISABLE SAFE UPDATE 

delete from OPTION_CHAIN_OLD where date(record_date) = '2024-07-02';

INSERT INTO OPTION_CHAIN
SELECT oc.*
FROM OPTION_CHAIN_OLD oc
INNER JOIN (
    SELECT SYMBOL, DATE(RECORD_DATE) as RECORD_DAY, MAX(RECORD_DATE) as MaxDateTime
    FROM OPTION_CHAIN_OLD
    GROUP BY SYMBOL, RECORD_DAY
) groupedoc 
ON oc.SYMBOL = groupedoc.SYMBOL 
AND oc.RECORD_DATE = groupedoc.MaxDateTime;


SHOW VARIABLES LIKE 'wait_timeout';
SHOW VARIABLES LIKE 'interactive_timeout';

SET SESSION wait_timeout = 3600; # set to 1 hour
SET SESSION interactive_timeout = 3600; # set to 1 hour

CREATE INDEX IDX_OPTION_CHAIN_EXP_DATE_MAP_OLD_RECORD_DATE
ON OPTION_CHAIN_EXP_DATE_MAP_OLD (RECORD_DATE);

#INSERT INTO OPTION_CHAIN_EXP_DATE_MAP
SELECT oc.*
FROM OPTION_CHAIN_EXP_DATE_MAP_OLD oc
INNER JOIN (
    SELECT SYMBOL, DATE(RECORD_DATE) as RECORD_DAY, MAX(RECORD_DATE) as MaxDateTime
    FROM OPTION_CHAIN_EXP_DATE_MAP_OLD
    GROUP BY SYMBOL, RECORD_DAY
) groupedoc 
ON oc.SYMBOL = groupedoc.SYMBOL 
AND oc.RECORD_DATE = groupedoc.MaxDateTime;


SELECT oc.*
FROM OPTION_CHAIN_EXP_DATE_MAP_OLD oc
INNER JOIN (
    SELECT SYMBOL, DATE(RECORD_DATE) as RECORD_DAY, MAX(RECORD_DATE) as MaxDateTime
    FROM OPTION_CHAIN_EXP_DATE_MAP_OLD
    WHERE DATE(RECORD_DATE) = '2024-06-23'  -- replace 'your_specific_date' with the date you want to filter by
    GROUP BY SYMBOL, RECORD_DAY
) groupedoc 
ON oc.SYMBOL = groupedoc.SYMBOL 
AND oc.RECORD_DATE = groupedoc.MaxDateTime;



select min(datetime) from OHLC_MINUTES;

select min(datetime) from SPX_OHLC_MINUTES;

SELECT * FROM OHLC_MINUTES WHERE TICKER = '$SPX';

DESC OHLC_MINUTES;



/*
 * 
 */
CREATE INDEX datetime_index_spx_ohlc
ON SPX_OHLC_MINUTES (DATETIME);

CREATE INDEX datetime_index_ohlc
ON OHLC_MINUTES (DATETIME);

SELECT DATE(MAX(DATETIME)) FROM SPX_OHLC_MINUTES; # .0067 SECONDS

SELECT MAX(DATE(DATETIME)) FROM OHLC_MINUTES; # .567 SECONDS

SET @max_date_spx = (SELECT MAX(DATE(DATETIME)) FROM SPX_OHLC_MINUTES);
SET @max_date_ohlc = (SELECT MAX(DATE(DATETIME)) FROM OHLC_MINUTES);

SELECT TICKER, RECORD_DATE, COUNT FROM (
    SELECT 'SPX' AS TICKER, DATE(DATETIME) AS RECORD_DATE, COUNT(*) AS COUNT 
    FROM SPX_OHLC_MINUTES 
    WHERE DATE(DATETIME) = @max_date_spx
    GROUP BY RECORD_DATE
    UNION
    SELECT TICKER, DATE(DATETIME) AS RECORD_DATE, COUNT(*) AS COUNT 
    FROM OHLC_MINUTES 
    WHERE DATE(DATETIME) = @max_date_ohlc
    GROUP BY TICKER, RECORD_DATE
) AS A 
ORDER BY A.TICKER; # 3.212 SECONDS

/*
 * Query for the Home screnne (too slow)
 */
SELECT TICKER, RECORD_DATE, COUNT FROM (
SELECT 'SPX' AS TICKER, DATE(DATETIME) AS RECORD_DATE, COUNT(*) AS COUNT FROM SPX_OHLC_MINUTES 
WHERE DATE(DATETIME) = (SELECT MAX(DATE(DATETIME)) FROM SPX_OHLC_MINUTES) 
GROUP BY RECORD_DATE
UNION
SELECT TICKER, DATE(DATETIME) AS RECORD_DATE, COUNT(*) AS COUNT FROM OHLC_MINUTES 
WHERE DATE(DATETIME) = (SELECT MAX(DATE(DATETIME)) FROM OHLC_MINUTES) 
GROUP BY TICKER, RECORD_DATE)
AS A ORDER BY A.TICKER; # 7.156

SELECT TICKER, RECORD_DATE, COUNT FROM (
SELECT 'SPX' AS TICKER, DATE(DATETIME) AS RECORD_DATE, COUNT(*) AS COUNT FROM SPX_OHLC_MINUTES 
WHERE DATE(DATETIME) = (SELECT DATE(MAX(DATETIME)) FROM SPX_OHLC_MINUTES) 
GROUP BY RECORD_DATE
UNION
SELECT TICKER, DATE(DATETIME) AS RECORD_DATE, COUNT(*) AS COUNT FROM OHLC_MINUTES 
WHERE DATE(DATETIME) = (SELECT DATE(MAX(DATETIME)) FROM OHLC_MINUTES) 
GROUP BY TICKER, RECORD_DATE)
AS A ORDER BY A.TICKER; # 4.067



/*
 * Number of positions per account 
 */
SELECT 
	RECORD_DATE, 
    ACCOUNT_NUMBER, 
	COUNT(*) 
FROM 
	POSITION_VIEW
GROUP BY
	RECORD_DATE, ACCOUNT_NUMBER
ORDER BY RECORD_DATE DESC;

/*
 * Explore the data for option chain
 */

SELECT 
	*
FROM 
	OPTION_CHAIN_VIEW
WHERE
	SYMBOL = 'AAPL' AND
    RECORD_DATE LIKE '2024-06-25%' AND
    STRIKE_PRICE = 200 AND
    EXP_DATE_MAP LIKE '2024-06-28%' AND
    PUT_CALL = 'PUT'
;

SELECT 
	*
FROM 
	OPTION_CHAIN_VIEW 
WHERE
	SYMBOL = '$SPX' AND
    PUT_CALL = 'PUT' AND
    EXP_DATE_MAP LIKE '2024-06-25%' AND
    EXP_DATE_PRICE_MAP LIKE '5450%'; 
    

SELECT 
	RECORD_DATE,
    COUNT(*)
FROM 
	OPTION_CHAIN_VIEW 
WHERE
	SYMBOL = 'AAPL' AND
    RECORD_DATE LIKE '2024-06-25%'
GROUP BY RECORD_DATE; 

/* 
 * COUNT OF PUT AND CALL 
 */
SELECT 
	'PUT',
	COUNT(*)
FROM 
	OPTION_CHAIN_VIEW 
WHERE
	SYMBOL = '$SPX' AND
    PUT_CALL = 'PUT' AND
	RECORD_DATE = '2024-06-23' AND
    EXP_DATE_MAP = '2024-06-24:1'
UNION
SELECT 
	'CALL',
	COUNT(*)
FROM 
	OPTION_CHAIN_VIEW 
WHERE
	SYMBOL = '$SPX' AND
    PUT_CALL = 'CALL' AND
	RECORD_DATE = '2024-06-23' AND
    EXP_DATE_MAP = '2024-06-24:1'; 

/*
 * DAILY_BALANCE 
 */
SELECT 
    AR.ACCOUNT_DESCRIPTION,
	DB.ACCOUNT_NUMBER,
    DB.RECORD_DATE,
    DB.LIQUIDITY_VALUE
FROM 
	DAILY_BALANCE DB,
    ACCOUNT_REFERENCE AR
WHERE
	DB.ACCOUNT_NUMBER = AR.ACCOUNT_NUMBER;
    

SELECT 
    AR.ACCOUNT_DESCRIPTION,
	DB.ACCOUNT_NUMBER,
    DB.RECORD_DATE,
    DB.LIQUIDITY_VALUE
FROM 
	DAILY_BALANCE DB,
    ACCOUNT_REFERENCE AR
WHERE
	DB.ACCOUNT_NUMBER = AR.ACCOUNT_NUMBER AND
    DATE(RECORD_DATE) = (SELECT MAX(RECORD_DATE) FROM DAILY_BALANCE);


                SELECT  
                    TEMP.RECORD_DATE,
                    TEMP.ACCOUNT_DESCRIPTION,
                    COUNT(TEMP.MAINTENANCE_REQUIREMENT) AS NUMBER_OF_POSITIONS,
                    MAX(TEMP.AGG_BALANCE_LIQUIDATION_VALUE) AS CURRENT_BALANCE
                FROM
                    (
                    SELECT
                        RECORD_DATE,
                        ACCOUNT_DESCRIPTION,
                        MAINTENANCE_REQUIREMENT,
                        AGG_BALANCE_LIQUIDATION_VALUE,
                        IS_DAY_TRADER
                    FROM 
                        POSITION_VIEW
                    WHERE 
                        DATE(RECORD_DATE) = (SELECT MAX(RECORD_DATE) FROM POSITION)
                    ORDER BY SYMBOL
                    ) AS TEMP
                GROUP BY TEMP.ACCOUNT_DESCRIPTION;
